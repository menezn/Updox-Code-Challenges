package prime;

import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.locks.ReentrantLock;

public class WheelGenerator implements PrimeNumberGenerator {
	
	private static List<Integer> primes = Collections.synchronizedList(new LinkedList<Integer>());
	private static List<Integer> primeQueue = Collections.synchronizedList(new LinkedList<Integer>());
	private static Set<Integer> smallPrimes = HashSet<Integer>(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23));
	private static int wheelCircumference = 223092870;
	private static int MAX_VALUE = Integer.MAX_VALUE;
	private static int max_sieved = -1;
	
	private static ReentrantLock lock = new ReentrantLock();

	@Override
	public List<Integer> generate(int startingValue, int endingValue) {
		
		if (endingValue < startingValue) {
			int tmp = startingValue;
			startingValue = endingValue;
			endingValue = tmp;
		}
		
		List<Integer> returnType;// = generateWheelList(startingValue,endingValue);
//		Sieve.sieve(returnType);
		
		return null;
	}

	@Override
	public boolean isPrime(int value) {
		// TODO Auto-generated method stub
		
		return false;
	}
	
	public void generateWheelList() {
		
		
	}
	
	public void generatePrimaryList() {
		primes.add(2);
		
		for (int i = 3; i <= MAX_VALUE; i+=2) {
			primeQueue.add(i);
		}
	}
}
